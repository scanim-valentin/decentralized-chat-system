@startuml sequence_black_box
actor User1 as User
participant "Chat Agent" as chatAgent
actor "Network\n(User2,User3,...,UserN)" as Network
actor "Remote Database\n(User*User*History)" as db
actor "Clock" as Clock

== User1 opens the agent ==

User -> chatAgent ++ : Opens Agent
 rnote over chatAgent: ""bool isUsernameValid = False""\n""UserList user_list = null""
chatAgent -> User -- : Shows UI :\nUsername Input

== Login phase ==

loop if !isUsernameValid
User -> chatAgent ++ : Logins as "name"

chatAgent -> Network ++ : UDPBroadcast_IDRequest()
Network -> chatAgent : [from UPD packet] {User2_name, User2_IP, User2_port} 
chatAgent -> chatAgent : user_list.append({User2_name, User2_IP, User2_port})
Network -> chatAgent : . . . 
Network -> chatAgent -- : [from UPD packet] {UserN_ID, UserN_IP, UserN_port}
chatAgent -> chatAgent : user_list.append({UserN_name, UserN_IP, UserN_port})
rnote over chatAgent:  isUsernameValid = !user_list.find("name")

alt isUsernameValid == false
chatAgent -> chatAgent : isUsernameValid = True
User <- chatAgent : Shows Connected User List
chatAgent -> Network : UDPBroadcast_NotifyConnection("name")
    else isUsernameValid == true
User <- chatAgent -- : Shows invalid input message
    end
end

== User1 wants to chat with (connected) User2 ==

User -> chatAgent ++ : Starts Chatting Session\nwith User2
  chatAgent -> db ++ : retrieveHistory(User2)
  db -> chatAgent -- : history_user2
chatAgent -> User -- : Shows UI :\nChat window with conversation history

User -> chatAgent ++ : Sends Message "Hi!" M1 
  chatAgent -> Network : Request (TCP) connection\nwith User2
  chatAgent -> Clock ++ : getTime()
  Clock -> chatAgent -- : current_time
  chatAgent -> Network : sendMessage(User2,M1)
  chatAgent -> db : updateHistory(User2,M1)
chatAgent -> User -- : Shows UI :\n Updated chat with new message

Network -> chatAgent ++ : Receive Messsage "Hello" M2 
chatAgent -> User -- : Shows UI :\n Updated chat with new message

User -> chatAgent ++ : Sends Message "See you later!" M3 
  chatAgent -> Clock ++ : getTime()
  Clock -> chatAgent -- : current_time
  chatAgent -> Network : sendMessage(User2,M3)
  chatAgent -> db : updateHistory(User2,M3)
chatAgent -> User -- : Shows UI :\n Updated chat with new message

User -> chatAgent : Closes Chatting Session
chatAgent -> Network : End (TCP) connection\nwith User2\nClose chat UI

== User1 receives a message from User3 ==

Network -> chatAgent ++ : Incoming TCP connection request\nfrom User3
chatAgent -> chatAgent : Start Chatting Session with User3
Network -> chatAgent : Receive Messsage M4 from User3

  chatAgent -> db ++ : retrieveHistory(User3) 
  db -> chatAgent -- : history_user3
chatAgent -> User -- : Shows UI :\n Updated chat\nwith history and new message

== User1 sends a file to User3 ==
User -> chatAgent ++ : Sends File F1
chatAgent -> Network : FTPRequest(User3)\nto User3
Network -> chatAgent : FTPAccept()\nfrom User3
chatAgent -> Network : FTPSendFile(User3,F1)
chatAgent -> Clock ++ : getTime()
Clock -> chatAgent -- : current_time
chatAgent -> Network : sendMessage(User3,M4))
chatAgent -> db -- : updateHistory(User3,M4)
== User1 closes the agent ==

User -> chatAgent ++ : Closes Agent
  chatAgent -> Network : End (TCP) connection\nwith User3
  chatAgent -> Network : (UDP)\nnotifyUsers()
chatAgent -> User -- : Closes UI

@enduml