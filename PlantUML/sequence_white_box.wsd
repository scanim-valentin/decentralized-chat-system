@startuml sequence_white_box
actor User1 as User
box "Chat Agent"
  participant  "JFrames" as UI
  participant "Main Controller" as MC
  participant "Launcher" as launcher
  participant "Chatting Session 1" as chat1
  participant "Chatting Session 2" as chat2
  participant "Chatting\nSession\nController" as CSC
  participant "Distributed\nData\nController" as DDC
  participant "Remote\nDatabase\nController" as RDC
end box

actor "Clock" as Clock
actor "Network" as Network
actor "Remote Database" as db

== User1 opens the agent ==
User -> Launcher ++ : Opens Agent
  Launcher -> DDC : start_deamon()
  Launcher -> UI : new ConnectWindow()
  DDC -> Network ++: Request via\nUDP broadcast
  
  Network -> DDC : User2_ID, ethernet address
  Network -> DDC : . . . 
  Network -> DDC : UserN_ID
  
  DDC -> UI -- : user_list 
  
== Login phase ==

  User -> UI : Login attempt as "name"
  
  alt setUsername("name") == SUCCESS

    DDC -> Network : Notification\nvia UDP broadcast
    UI <- UI : new ChatWindow()
  
  else setUsername("name") == INVALID_CONTENT

    UI <- UI : Error Message:\n"Name contains illegal character"
  
  else setUsername("name") == ALREADY_TAKEN

      UI <- UI : Error Message:\n"Name Already Taken"

  end

== User1 wants to chat with (connected) User2 ==

User -> UI : Select User2 in user list
  UI -> RDC : newChat("user2")
  RDC -> chat1 ** 
  chat1 -> RDC ++ : retrieveHistory(User2)
    RDC -> db : SQL request
    db -> RDC : history_user2
  RDC -> chat1 -- : conversation+=history_user2

chat1 -> UI -- : refresh_messages()

User -> UI : Sends Message "hello"
UI -> CSC : sendMessage("hello","user2")
CSC -> chat1 : send("hello")
chat1 -> Clock : getTime()
Clock -> chat1 : new TimeStamp()

chat1 -> Network : Establish (TCP) connection\nwith User2
chat1 -> Network : sendMessage(User2,M1)

chat1 -> RDC : updateHistory(User2,M1)
    RDC -> db : SQL request
chat1 -> UI -- : addMessage(M1)

Network -> chat1 ++ : receiveMessage(User2,M2)
chat1 -> UI -- : addMessage(M2)

== User1 receives a message from User3 ==

Network -> RDC : Incoming TCP connection request\nfrom User3
  RDC -> chat2 ** : newChat(User3)
    chat2 -> RDC ++ : retrieveHistory(User3)
    RDC -> db : SQL request
    db -> RDC : history_user3
  RDC -> chat2 -- : history_user3
  chat2 -> Network : Accept TCP connection with User3 
  RDC -> chat2  : conversation+=history_user2
  chat2 -> UI : refresh_messages()
  Network -> chat2 ++: receiveMessage(User3,M3)
  chat2 -> UI -- : refresh_messages()

== User1 closes the agent ==

User -> UI : Closes Agent
CSC -> CSC : Closing sockets and deamon
DDM -> DDM : Closing deamon

@enduml