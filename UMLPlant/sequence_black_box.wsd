@startuml sequence_black_box
actor User1 as User
participant "Chat Agent" as chatAgent
actor "Network" as Network
actor "Clock" as Clock

User -> chatAgent ++ : Opens Agent
  chatAgent -> chatAgent : isUsernameValid = False\nuser_list = null
chatAgent -> User -- : Shows UI :\nUsername Input


loop if !isUsernameValid
User -> chatAgent ++ : Logins as "name"

chatAgent -> Network ++ : (UDP)\nverifyUnicity()
Network -> chatAgent -- : remote_user_list
 alt user_list.isEmpty()
  chatAgent -> chatAgent : user_list = remote_user_list 
 end
alt name available
chatAgent -> chatAgent : isUsernameValid = True
User <- chatAgent : Shows Connected User List
chatAgent -> Network : (UDP)\nnotifyConnection()
    else name already taken
User <- chatAgent -- : Shows invalid input message
    end
end

User -> chatAgent ++ : Starts (TCP) Chatting Session\nwith User2
  chatAgent -> db ++ : retrieveHistory(User2)
  Network -> chatAgent -- : history_user2
chatAgent -> User -- : Shows UI :\nChat window with conversation history

User -> chatAgent ++ : Sends Message M1
  chatAgent -> Clock ++ : getTime()
  Clock -> chatAgent -- : current_time
  chatAgent -> Network : sendMessage(User2,M1)
  chatAgent -> db : updateHistory(User2,M1)
chatAgent -> User -- : Shows UI :\n Updated chat with new message

Network -> chatAgent ++ : Receive Messsage M2
chatAgent -> User -- : Shows UI :\n Updated chat with new message

User -> chatAgent : Closes Chatting Session
chatAgent -> chatAgent : End (TCP) connection\nwith User2

Network -> chatAgent ++ : Incoming TCP connection request\nwith User3
chatAgent -> chatAgent : Start Chatting Session with User3
Network -> chatAgent : Receive Messsage M3 from User3

  chatAgent -> db ++ : retrieveHistory(User3) 
  Network -> chatAgent -- : history_user3
chatAgent -> User -- : Shows UI :\n Updated chat\nwith history and new message

User -> chatAgent ++ : Closes Agent
  chatAgent -> chatAgent : End (TCP) connection\nwith User3
  chatAgent -> Network : (UDP)\nnotifyUsers()
chatAgent -> User -- : Closes UI

@enduml