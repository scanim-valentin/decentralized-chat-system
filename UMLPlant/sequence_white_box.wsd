@startuml ChatAgentWhiteBoxSequence
actor User1 as User
box "Chat Agent"
  participant  "UI Manager" as UI
  participant "Main Class\n(and other classes)" as chatAgent
  participant "Distributed\nData\nManager" as distributedManager
  participant "Remote\nDatabase\nManager" as databaseManager
end box

actor "Network" as Network
actor "Clock" as Clock

User -> chatAgent ++ : Opens Agent
  chatAgent -> distributedManager **
  chatAgent -> distributedManager ++ : getConnectedUserList()
    distributedManager -> Network : Request via\nUDP broadcast
    Network -> distributedManager : User2_ID, ethernet address
    Network -> distributedManager : . . . 
    Network -> distributedManager : UserN_ID
  distributedManager -> chatAgent -- : user_list 
  
  UI <- chatAgent ** : openUI() :
chatAgent -> UI -- : inputDialogBox(login)

User -> UI : Logins as "name"
UI -> chatAgent : login == "name"
loop if !isUsernameValid
alt name available
chatAgent -> chatAgent : isUsernameValid = True
chatAgent -> distributedManager : notifyNewName(login)
distributedManager -> Network : Notification\nvia UDP broadcast
UI <- chatAgent : display(user_list)
    else name already taken
UI <- chatAgent : errorMessage("Name Already Taken")
UI <- chatAgent -- : inputDialogBox(login)
    end
end

User -> chatAgent ++ : Starts Chatting Session\nwith User2
  chatAgent -> databaseManager ** 
  chatAgent -> databaseManager ++ : retrieveHistory(User2)
    databaseManager -> Network : SQL request
    Network -> databaseManager : history_user2
  databaseManager -> chatAgent -- : history_user2

  chatAgent -> UI : openChattingSession(User2)
chatAgent -> UI -- : display(history_user2)

User -> chatAgent ++ : Sends Message M1
  chatAgent -> Clock : getTime()
  Clock -> chatAgent : current_time

  chatAgent -> Network : sendMessage(User2,M1)

  chatAgent -> databaseManager : updateHistory(User2,M1)
    databaseManager -> Network : SQL request
chatAgent -> UI -- : addMessage(M1)

Network -> chatAgent ++ : receiveMessage(User2,M2)
chatAgent -> UI -- : addMessage(M2)

User -> chatAgent : Closes Chatting Session
chatAgent -> UI : closeChattingSession(User2)

Network -> chatAgent ++ : Receive Messsage M3 from User3
  chatAgent -> databaseManager ++ : retrieveHistory(User3)
    databaseManager -> Network : SQL request
    Network -> databaseManager : history_user3
  databaseManager -> chatAgent -- : history_user3
  chatAgent -> UI : openChattingSession(User3)
  chatAgent -> UI : display(history_user3)
chatAgent -> UI -- : addMessage(M3)

User -> chatAgent : Closes Agent
chatAgent -> distributedManager : notifyUsers()
distributedManager -> Network : Notification\nvia UDP broadcast
chatAgent -> distributedManager !!
chatAgent -> UI !!
chatAgent -> databaseManager !!
@enduml