@startuml sequence_white_box
actor User1 as User
box "Chat Agent"
  participant  "UI Manager" as UI
  participant "Main Class\n(and other classes)" as chatAgent
  participant "Chatting Session 1" as chat1
  participant "Chatting Session 2" as chat2
  participant "Distributed\nData\nManager" as distributedManager
  participant "Remote\nDatabase\nManager" as databaseManager
end box

actor "Network" as Network
actor "Clock" as Clock

User -> chatAgent ++ : Opens Agent
  UI <- chatAgent ** 
  chatAgent -> distributedManager **
  chatAgent -> distributedManager ++ : getConnectedUserList()
    distributedManager -> Network : Request via\nUDP broadcast
    Network -> distributedManager : User2_ID, ethernet address
    Network -> distributedManager : . . . 
    Network -> distributedManager : UserN_ID
  distributedManager -> chatAgent -- : user_list 
  
chatAgent -> UI -- : inputDialogBox(login)

loop if !isUsernameValid
User -> UI : Logins attempt as "name"
UI -> chatAgent : eventLogin("name")
alt name available
chatAgent -> chatAgent : isUsernameValid = True
chatAgent -> distributedManager : notifyNewName(login)
distributedManager -> Network : Notification\nvia UDP broadcast
UI <- chatAgent : display(user_list)
    else name already taken
UI <- chatAgent : errorMessage("Name Already Taken")
UI <- chatAgent -- : inputDialogBox(login)
    end
end

User -> UI : Starts Chatting Session\nwith User2
  UI -> chatAgent : eventNewChat(User2)
  chatAgent -> chat1 ** : create(User2)
  chat1 -> databaseManager ** 
  chat1 -> databaseManager ++ : retrieveHistory(User2)
    databaseManager -> Network : SQL request
    Network -> databaseManager : history_user2
  databaseManager -> chat1 -- : history_user2

  chat1 -> UI : openChattingSession(User2)
chat1 -> UI -- : display(history_user2)

User -> UI : Sends Message M1
  UI -> chat1 : eventSendMessage(M1)
  chat1 -> Clock : getTime()
  Clock -> chat1 : current_time

  chat1 -> Network : sendMessage(User2,M1)

  chat1 -> databaseManager : updateHistory(User2,M1)
    databaseManager -> Network : SQL request
chat1 -> UI -- : addMessage(M1)

Network -> chat1 ++ : receiveMessage(User2,M2)
chat1 -> UI -- : addMessage(M2)

User -> UI : Closes Chatting Session
UI -> chatAgent : eventClose(chat1)
chatAgent -> chat1 !! : close()
chatAgent -> UI : closeChattingSession(User2)

Network -> chatAgent : Receive Messsage M3 from User3
  chatAgent -> chat2 ** : create(User3)
  chat2 -> databaseManager ++ : retrieveHistory(User3)
    databaseManager -> Network : SQL request
    Network -> databaseManager : history_user3
  databaseManager -> chat2 -- : history_user3
  chat2 -> UI : openChattingSession(User3)
  chat2 -> UI : display(history_user3)
chat2 -> UI -- : addMessage(M3)

User -> UI : Closes Agent
UI -> chatAgent : eventClose()
chatAgent -> chat2 !! : close()
chatAgent -> distributedManager : notifyUsers()
distributedManager -> Network : Notification\nvia UDP broadcast
chatAgent -> chatAgent !! : close()
chatAgent -> distributedManager !!
chatAgent -> databaseManager !!
chatAgent -> UI !!
@enduml