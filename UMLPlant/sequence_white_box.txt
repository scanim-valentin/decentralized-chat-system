@startuml
actor User1 as User
box "Chat Agent"
  
  UI <- chatAgent ** : openUI() 
  participant "other classes" as chatAgent

end box

actor "Network" as Network
actor "Clock" as Clock

User -> chatAgent ++ : Opens Agent
chatAgent -> Network : getConnectedUserList()
Network -> chatAgent : user_list
chatAgent -> UI -- : inputDialogBox(login)

User -> UI : Logins as "name"
UI -> chatAgent : login == "name"
loop if !isUsernameValid
alt name available
chatAgent -> chatAgent : isUsernameValid = True
UI <- chatAgent : display(user_list)
    else name already taken
UI <- chatAgent : errorMessage("Name Already Taken")
UI <- chatAgent -- : inputDialogBox(login)
    end
end

User -> chatAgent ++ : Starts Chatting Session\nwith User2
  chatAgent -> Network : retrieveHistory(User2)
  Network -> chatAgent : history_user2
  chatAgent -> UI : openChattingSession(User2)
chatAgent -> UI -- : display(history_user2)

User -> chatAgent ++ : Sends Message M1
  chatAgent -> Clock : getTime()
  Clock -> chatAgent : current_time
  chatAgent -> Network : sendMessage(User2,M1)
  chatAgent -> Network : updateHistory(User2,M1)
chatAgent -> UI -- : addMessage(M1)

Network -> chatAgent ++ : receiveMessage(User2,M2)
chatAgent -> UI -- : addMessage(M2)

User -> chatAgent : Closes Chatting Session
chatAgent -> UI : closeChattingSession(User2)

Network -> chatAgent ++ : Receive Messsage M3 from User3
  chatAgent -> Network : retrieveHistory(User3) 
  Network -> chatAgent : history_user3
  chatAgent -> UI : openChattingSession(User3)
  chatAgent -> UI : display(history_user3)
chatAgent -> UI -- : addMessage(M3)

User -> chatAgent ++ : Closes Agent
  chatAgent -> Network : notifyUsers()
chatAgent -> UI -- : close()
@enduml